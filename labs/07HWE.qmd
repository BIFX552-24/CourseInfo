---
title: "Population genetics simulation"
date: "2024-10-01"
execute:
  echo: true
margin-footer: "[Slides](/standalone/labs/07HWE.html), [Assignment](/standalone/hw/L07HWE.html)"
---

## Today's lab

- Review of Hardy-Weinberg equilibrium
- Population genetics simulation

```{r}
#| include: false
library(dplyr)
library(knitr)
```

## Hardy-Weinberg Equilibrium

Hardy-Weinberg equilibrium (HWE) is a principle in population genetics that describes a state of genetic stability in a population. It predicts that, under certain ideal conditions, the frequencies of genotypes are dependent on allele frequencies and will remain constant across generations.

## HWE assumptions

The Hardy-Weinberg equilibrium assumes the following:

- Large population size
- Random mating
- No mutation
- No migration
- No natural selection

:::{.content-visible when-profile="book"}
In human populations, these assumptions are rarely met, but the HWE model provides a useful baseline and is actually quite robust in practice.
:::

## HWE equation

Given two alleles, A and B, with frequencies $p$ and $q$, respectively, a population in Hardy-Weinberg equilibrium will have the following genotype frequencies:

- $p^2$ = frequency of the homozygous dominant genotype (AA)
- $2pq$ = frequency of the heterozygous genotype (AB)
- $q^2$ = frequency of the homozygous recessive genotype (BB)

:::{.content-visible when-profile="slides"}
## HWE equation
:::

The Hardy-Weinberg equation can be derived from looking at all possible matings. For example for two heterozygous parents, the probability of each genotype in the offspring is as follows:

```{r}
#| echo: false
tibble(` ` = c("A", "B"),
       A = c("P(AA) = 0.25", "P(AB) = 0.25"),
       B = c("P(AB) = 0.25", "P(BB) = 0.25")) |>
  knitr::kable()
```

:::{.content-visible when-profile="book"}
When you sum the probabilities of each genotype, conditional on the frequency of parent genotypes in the population,

$$
\sum P(genotype_{f1} | genotype_{f0}) = 1,
$$

you get the Hardy-Weinberg equation:
:::

:::{.content-visible when-profile="slides"}
## HWE equation

The Hardy-Weinberg equation is given by:
:::

$$
p^2 + 2pq + q^2 = 1
$$

## Population genetics simulation

We will use a simulation to explore Hardy-Weinberg equilibrium. To this end, we need to define the following data structures and functions:

```{r}
#' gens
#' Data on multiple generations of individuals
#' @format A tibble where each row represents a subsequent generation 
#'   including the following fields:
#' @field sim A numeric vector indicating the simulation number
#' @field generation A numeric vector indicating the generation number
#' @field genos A list of genotypes with one vector of genotypes per 
#'   generation. Each value in a vector represents an individual in the 
#'   population, with 0, 1, and 2 representing genotypes AA, AB, and BB
#' @field n A numeric vector indicating the population size.
#' @field p A numeric vector with observed allele frequencies of A.
#' @field q A numeric vector with with observed frequencies of B.
#' @field pAA A numeric vector with observed frequencies of genotype AA.
#' @field pAB A numeric vector with observed frequencies of genotype AB.
#' @field pBB A numeric vector with observed frequencies of genotype BB.
```

:::{.content-visible when-profile="slides"}
## Population genetics simulation
:::

```{r}
#' gen0
#' Generate the initial population
#' @param n Number of individuals to simulate in the next generation
#' @param p Allele frequency of allele A
#' @param sim Simulation number
#' @details The returned `gens` object only has one row, containing the
#'   initial generation
#' @return A `gens` object containing simulated population.
```

:::{.content-visible when-profile="slides"}
## Population genetics simulation
:::

```{r}
#' next_gen
#' Generate the next generation
#' @param genos A vector of genotypes containing previous generations 
#'   (e.g. `gen_prev[[1]]$genos`)
#' @param n Number of individuals to simulate in the next generation
#' @param generation Generation number
#' @param sim Simulation number
#' @param mating_fun A function to pair up parents for mating
#' @details Individuals in `genos` will be randomly sorted and paired to
#'   generate the next generation. Offspring will be generated by randomly
#'   selecting a pair of parents, generating a single offspring, and 
#'   repeating this process until the desired number of offspring is reached.
#' @return A `gens` object containing simulated population.
```

:::{.content-visible when-profile="slides"}
## Population genetics simulation
:::

```{r}
#' sim_gens
#' Simulate multiple generations
#' @param n Number of individuals to simulate in the next generation
#' @param p Allele frequency of allele A
#' @param nsims Number of populations / simulations to run
#' @param mating_fun A function to pair up parents for mating
#' @param state An existing population to build from (i.e. skipping 
#'   the simulation of an initial generation)
#' @description This function simulates multiple generations of a population
#'   and includes the option to start from an existing `gens` object.
#' @return A `gens` object containing simulated population(s).
```

:::{.content-visible when-profile="slides"}
## Population genetics simulation
:::

```{r}
#' plot_allele_by_gen
#' Plot the allele frequencies of a `gens` object
#' @param gens A `gens` object
#' @return A ggplot object
```

## Primary tasks

* Initialize your group's repository with the provided [template](need link).

:::{.content-visible when-profile="slides"}
* Implement the functions `gen0`, `next_gen`, and `plot_gen_list` in R.

* Create a README file using Quarto with documentation.
:::

:::{.content-visible when-profile="book"}
* Implement the functions `gen0`, `next_gen`, and `plot_gen_list` in R.
  * Each student pick a different function to implement.
  * A sample `gen_list` object is included with the template.
  * Work together to test the functions.
  
* Create a README file using Quarto with documentation:
  * Use `format: "gfm"` in the YAML header.
  * Describe the use and purpose of the functions.
  * Provide examples of how to use the functions.
:::

* Commit and push your changes to the GitHub.

## Secondary tasks

* Add the following to your README file (some of these may require changes to your functions):
  * A brief description of the assumptions of the HWE model.
  * A simulation of the consequences of departures from HWE.
    * Each group will pick a different assumption to simulate.
    * Address as many assumptions as time allows.

:::{.content-visible when-profile="book"}
:::{.callout-tip}
## Pair mutation and selection assumptions

One group may want to pair violations of both the mutation and selection assumptions. This will require a more complex simulation, but it will provide a more complete picture of the consequences of these departures from HWE.
:::
:::